var emoji = (function(self) {
  "use strict";
  
    // settings
  self.img_path = 'emoji/';
  self.sheet_path = 'sheet_64.png';

  self.use_css_imgs = false;
  self.colons_mode = false;
  self.text_mode = false;
  self.include_title = false;
  self.allow_native = true;
  self.use_sheet = false;

  self.inits = {};
  self.map = {};

  self.replace_emoticons = function(str){
    self.init_emoticons();
    return str.replace(self.rx_emoticons, function(m, $1, $2){
      var val = self.map.emoticons[$2];
      return val ? $1+self.replacement(val, $2) : m;
    });
  };
  self.replace_emoticons_with_colons = function(str){
    self.init_emoticons();
    return str.replace(self.rx_emoticons, function(m, $1, $2){
      var val = self.data[self.map.emoticons[$2]][3][0];
      return val ? $1+':'+val+':' : m;
    });
  };
  self.replace_colons = function(str){
    self.init_colons();
    return str.replace(self.rx_colons, function(m){
      var idx = m.substr(1, m.length-2);
      var val = self.map.colons[idx];
      return val ? self.replacement(val, idx, ':') : m;
    });
  };
  self.replace_unified = function(str){
    self.init_unified();
    return str.replace(self.rx_unified, function(m){
      var val = self.map.unified[m];
      return val ? self.replacement(val) : m;
    });
  };

  self.replacement = function(idx, actual, wrapper){
    wrapper = wrapper || '';
    if (self.colons_mode) return ':'+self.data[idx][3][0]+':';
    var text_name = (actual) ? wrapper+actual+wrapper : self.data[idx][6] || wrapper+self.data[idx][3][0]+wrapper;
    if (self.text_mode) return text_name;
    self.init_env();
    if (self.replace_mode == 'unified'  && self.allow_native && self.data[idx][0][0]) return '<span class="emoji-sizer">' + self.data[idx][0][0] + "</span>";
    if (self.replace_mode == 'softbank' && self.allow_native && self.data[idx][1]) return '<span class="emoji-sizer">' + self.data[idx][1] + "</span>";
    if (self.replace_mode == 'google'   && self.allow_native && self.data[idx][2]) return '<span class="emoji-sizer">' + self.data[idx][2] + "</span>";
    var img = self.data[idx][7] || self.img_path+idx+'.png';
    var title = self.include_title ? ' title="'+(actual || self.data[idx][3][0])+'"' : '';
    var text  = self.include_text  ? wrapper+(actual || self.data[idx][3][0])+wrapper : '';
    if (self.supports_css) {
      var px = self.data[idx][4];
      var py = self.data[idx][5];
      if (self.use_sheet && px != null && py != null){
        var mul = 100 / (self.sheet_size - 1);
        var style = 'background: url('+self.sheet_path+');background-position:'+(mul*px)+'% '+(mul*py)+'%;background-size:'+self.sheet_size+'00%';
        return '<span class="emoji-outer emoji-sizer"><span class="emoji-inner" style="'+style+'"'+title+'>'+text+'</span></span>';
      }else if (self.use_css_imgs){
        return '<span class="emoji emoji-'+idx+'"'+title+'>'+text+'</span>';
      }else{
        return '<span class="emoji emoji-sizer" style="background-image:url('+img+')"'+title+'>'+text+'</span>';
      }
    }
    return '<img src="'+img+'" class="emoji" '+title+'/>';
  };

  self.init_emoticons = function(){
    if (self.inits.emoticons) return;
    self.init_colons(); // we require this for the emoticons map
    self.inits.emoticons = 1;
    
    var a = [];
    self.map.emoticons = {};
    for (var i in self.emoticons_data){
      // because we never see some characters in our text except as entities, we must do some replacing
      var emoticon = i.replace(/\&/g, '&amp;').replace(/\</g, '&lt;').replace(/\>/g, '&gt;');
      
      if (!self.map.colons[self.emoticons_data[i]]) continue;

      self.map.emoticons[emoticon] = self.map.colons[self.emoticons_data[i]];
      a.push(self.escape_rx(emoticon));
    }
    self.rx_emoticons = new RegExp(('(^|\\s)('+a.join('|')+')(?=$|[\\s|\\?\\.,!])'), 'g');
  };
  self.init_colons = function(){
    if (self.inits.colons) return;
    self.inits.colons = 1;
    self.rx_colons = new RegExp('\:[^\\s:]+\:', 'g');
    self.map.colons = {};
    for (var i in self.data){
      for (var j=0; j<self.data[i][3].length; j++){
        self.map.colons[self.data[i][3][j]] = i;
      }
    }
  };
  self.init_unified = function(){
    if (self.inits.unified) return;
    self.inits.unified = 1;

    var a = [];
    self.map.unified = {};

    for (var i in self.data){
      for (var j=0; j<self.data[i][0].length; j++){
        a.push(self.data[i][0][j]);
        self.map.unified[self.data[i][0][j]] = i;
      }
    }

    self.rx_unified = new RegExp('('+a.join('|')+')', "g");
  };
  self.init_env = function(){
    if (self.inits.env) return;
    self.inits.env = 1;
    self.replace_mode = 'img';
    self.supports_css = false;
    var ua = navigator.userAgent;
    if (window.getComputedStyle){
      var st = window.getComputedStyle(document.body);
      if (st['background-size'] || st['backgroundSize']){
        self.supports_css = true;
      }
    }
    if (ua.match(/(iPhone|iPod|iPad|iPhone\s+Simulator)/i)){
      if (ua.match(/OS\s+[12345]/i)){
        self.replace_mode = 'softbank';
        return;
      }
      if (ua.match(/OS\s+[6789]/i)){
        self.replace_mode = 'unified';
        return;
      }
    }
    if (ua.match(/Mac OS X 10[._ ][789]/i)){
      if (!ua.match(/Chrome/i)){
        self.replace_mode = 'unified';
        return;
      }
    }
    // Need a better way to detect android devices that actually
    // support self.
    if (false && ua.match(/Android/i)){
      self.replace_mode = 'google';
      return;
    }
    if (self.supports_css){
      self.replace_mode = 'css';
    }
    // nothing fancy detected - use images
  };
  self.escape_rx = function(text) {
    return text.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, "\\$&");
  };
  self.sheet_size = #SHEET-SIZE#;
  self.data = #DATA#;
  self.emoticons_data = #DATA2#;

  return self;
}(emoji || {}));
